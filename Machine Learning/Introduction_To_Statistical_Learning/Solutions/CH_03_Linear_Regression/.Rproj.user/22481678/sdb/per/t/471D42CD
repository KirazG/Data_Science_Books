{
    "collab_server" : "",
    "contents" : "#################################################################################\n##### BOOK: INTRODUCTION TO STATISTICAL LEARNING                            #####\n##### CHAPTER: 03 - LINEAR REGRESSION                                       #####\n#################################################################################\n\n##### Cleanup environment & Set working directory\n\nrm(list = ls(all.names = TRUE))\nrequire(ISLR)\nrequire(MASS)\nrequire(corrplot)\nrequire(car)\n\n\n#################################################################################\n##### SECTION 3.6.x: BOSTON HOUSING DATA SET                                #####\n#################################################################################\n\n##### Simple Linear Regression using Boston Housing Dataset\n\n### Load and Copy Boston Housing data\ndata(\"Boston\")\ndfBoston = Boston\n\n### Take a look at the data\nfix(dfBoston)\nstr(dfBoston)\nsummary(dfBoston)\n\n### Look at variable names in the set\nnames(dfBoston)\n\n### Look at variable names in the set\nlm.fit =lm(medv ~ .,data = dfBoston)\nsummary (lm.fit)\n\n### To access individual elements of Sumamry\n\nobjSum <- summary(lm.fit)\n\n# Model's F-statistics\nobjSum$fstatistic\n\n# Model's RSE\nobjSum$sigma\n\n# R-square & Adjusted-R-square\nobjSum$r.squared\nobjSum$adj.r.squared\n\n### Updating linear model using update()\n\n# Exclude age variable\nlm.fit1 = update(object = lm.fit, formula. = medv ~ .-age)\nsummary(lm.fit1)\n\n# Exlcude indus as it's not significant\nlm.fit2 = update(object = lm.fit1, formula. = medv ~ .-indus)\nsummary(lm.fit2)\n\n### INTERACTION TERMS:\n# The syntax lstat:black tells R to include an interaction term between lstat and black. # The syntax lstat*age simultaneously includes lstat, age, and the interaction term lstatÃ—age as predictors; it is a shorthand for - lstat+age+lstat:age.\n\n### Trying polynomial predictors/terms\n### Using ANOVA for comparing linear model fits with different parameters\n\n# Predictor lstat with power 1\nlm1 = lm(formula = medv ~ lstat, data = dfBoston)\nsummary(lm1)\n\n# Predictor lstat with power 2\n# I() is required in the forula to preserve the meaning of ^ as an arithmatic operator\nlm2 = lm(formula = medv ~ lstat + I(lstat^2), data = dfBoston)\nsummary(lm2)\n\n# Predictor lstat with power 3\nlm3 = lm(formula = medv ~ lstat + I(lstat^3), data = dfBoston)\nsummary(lm3)\n\n# Using ANOVA - Compare lm1 & lm2\nanova(lm1, lm2)\nanova(lm2, lm3)\nanova(lm1, lm3)\nanova(lm1, lm2, lm3)\n\n## Based on ANOVA - it's clear that the non-linearity in the data can be best modelled using a quadratic term. Using a cubic term is not helping as the model with cubic term is inferior to the model with quadratic temrm.\n\n\n\n",
    "created" : 1485693073598.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3960289941",
    "id" : "471D42CD",
    "lastKnownWriteTime" : 1485698225,
    "last_content_update" : -2147483648,
    "path" : "~/GitHub/Data_Science_Books/Machine Learning/Introduction_To_Statistical_Learning/Solutions/CH_03_Linear_Regression/CH_03_Linear_Regression.R",
    "project_path" : "CH_03_Linear_Regression.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}