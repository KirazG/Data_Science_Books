setwd("~/GitHub/Data_Science_Books/Machine Learning/Introduction_To_Statistical_Learning/Solutions/CH_03_Linear_Regression")
rm(list = ls(all.names = TRUE))
require(ISLR)
require(MASS)
require(corrplot)
fix(Boston)
corrplot(corr = cor(Boston[,1:12]))
?Boston
corrplot(corr = cor(Boston))
data("Boston")
dfBoston = Boston
fix(dfBoston)
str(dfBoston)
summary(dfBoston)
names(dfBoston)
lm1 = lm(medv ~ ., data = dfBoston)
lm1
print(llm1)
print(lm1)
summary(lm1)
nrow(dfBoston)
492-13-1
506-13-1
summary(lm1)
plot(lm1)
hist(lm1$residuals)
hist(lm1$residuals, breaks = 20)
mean(lm1$residuals)
nrow(dfBoston)
names(lm1)
lm1$coefficients
lm1$residuals
lm1$effects
lm1$rank
lm1$fitted.values
lm1$assign
lm1$qr
lm1$df.residual
lm1$xlevels
lm1$call
lm1$terms
lm1$model
lm1$model
summary(lm1)
coef(lm1)
coefficients(lm1)
confint(lm1)
round(confint(lm1), 2)
summary(lm1)
lm2 = lm(medv ~ lstat, data = dfBoston)
summary(lm2)
plot(lm2)
plot(lstat, medv)
plot(dfBoston$lstat, dfBoston$medv)
abline(lm2)
corr(dfBoston$lstat, dfBoston$medv)
cor(dfBoston$lstat, dfBoston$medv)
abline(lm2, lwd=2)
abline(lm2, lwd=5)
abline(lm2, lwd=2)
abline(lm2, lwd=1.5)
abline(lm2, lwd=1)
plot(dfBoston$lstat, dfBoston$medv)
abline(lm2, lwd=0.5)
abline(lm2, lwd=1)
abline(lm2, lwd=2)
abline(lm2, lwd=2, col = "blue")
plot(lstat ,medv ,col ="red ")
plot(dfBoston$lstat ,dfBoston$medv ,col ="red ")
plot(dfBoston$lstat ,dfBoston$medv ,col ="red ", pch = 15)
plot(dfBoston$lstat ,dfBoston$medv ,col ="red ", pch = 10)
plot(dfBoston$lstat ,dfBoston$medv ,col ="red ", pch = 1)
plot(dfBoston$lstat ,dfBoston$medv ,col ="red ", pch = 20)
plot(predict (lm2), residuals (lm2))
hatvalues(lm2)
H <- hatvalues(lm2)
H
names(H)
sort(H)
sort(round(H,2))
sort(round(H,3))
sort(round(H,4))
sort(round(H,4), decreasing = TRUE)
plot(hatvalues(lm2))
### Load and Copy Boston Housing data
data("Boston")
dfBoston = Boston
### Take a look at the data
fix(dfBoston)
str(dfBoston)
summary(dfBoston)
### Look at variable names in the set
names(dfBoston)
### Look at variable names in the set
lm.fit =lm(medv ~ .,data = dfBoston)
summary (lm.fit)
?summary.lm
S <- summary(lm2)
S$call
S$terms
S$residuals
S$aliased
S$sigma
S$df
S$r.squared
S$adj.r.squared
S$cov.unscaled
S <- summary(lm.fit)
S$cov.unscaled
S$fstatistic
S$df
require(car)
objSum <- summary(lm.fit)
S$df
objSum$fstatistic
summary(lm.fit)
objSum$residuals
objSum$sigma
summary(lm.fit)
objSum$sigma
# R-square & Adjusted-R-square
objSum$r.squared
objSum$adj.r.squared
summary(dfBoston)
### Look at variable names in the set
names(dfBoston)
### Look at variable names in the set
lm.fit =lm(medv ~ .,data = dfBoston)
summary (lm.fit)
### To access individual elements of Sumamry
objSum <- summary(lm.fit)
# Model's F-statistics
objSum$fstatistic
?update
lm.fit1 = update(object = lm.fit, formula. = medv ~ .-age)
lm.fit
lm.fit1
lm.fit1 = update(object = lm.fit, formula. = medv ~ .-age -nox)
lm.fit1
summary(lm.fit1)
lm.fit2 = update(object = lm.fit1, formula. = medv ~ .-age-indus)
summary(lm.fit1)
summary(lm.fit2)
# Exlcude indus as it's not significant
lm.fit2 = update(object = lm.fit, formula. = medv ~ .-age-indus)
summary(lm.fit2)
# Exlcude indus as it's not significant
lm.fit2 = update(object = lm.fit1, formula. = medv ~ .-indus)
summary(lm.fit2)
# Exlcude indus as it's not significant
lm.fit2 = update(object = lm.fit1, formula. = medv ~ .-indus)
summary(lm.fit2)
hist(dfBoston$medv)
hist(dfBoston$medv, breaks = 50)
hist(dfBoston$medv)
hist(dfBoston$medv, breaks = 50)
hist(dfBoston$medv, breaks = 100)
abline(v = mean(dfBoston$medv))
hist(log(dfBoston$medv), breaks = 50)
abline(v = mean(log(dfBoston$medv)))
sd(log(dfBoston$medv))
?I
lm1 = lm(formula = medv ~ lstat, data = dfBoston)
lm1 = lm(formula = medv ~ lstat, data = dfBoston)
summary(lm1)
# I() is required in the forula to preserve the meaning of ^ as an arithmatic operator
lm2 = lm(formula = medv ~ lstat + I(lstat ^ 2), data = dfBoston)
summary(lm1)
lm1 = lm(formula = medv ~ lstat, data = dfBoston)
summary(lm1)
# I() is required in the forula to preserve the meaning of ^ as an arithmatic operator
lm2 = lm(formula = medv ~ lstat + I(lstat^2), data = dfBoston)
summary(lm2)
# Predictor lstat with power 3
lm3 = lm(formula = medv ~ lstat + I(lstat^3), data = dfBoston)
summary(lm3)
anova(lm1, lm2)
anova(lm1, lm2, lm3)
# Using ANOVA - Compare lm1 & lm2
anova(lm1, lm2)
anova(lm2, lm3)
anova(lm1, lm3)
anova(lm1, lm2, lm3)
?Contrasts
?contrasts
contrasts(dfBoston$chas)
contrasts(as.factor(dfBoston$chas))
contrasts(as.factor(dfBoston$medv))
